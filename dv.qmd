---
title: "Data Vizes in TS"
editor: visual
format:
  html:
    toc: false
execute:
  echo: false
---

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
library(tidyverse)
library(quantmod)
library(plotly)

```

### Data Visualization with Stock Data

In this example, we consider the daily stock prices for Facebook (now META) and Twitter starting in early 2021. Both social media companies have experienced tumultuous years for reasons related to their leadership and vision. Below we compare their stock performance over the last two years in more detail.

```{r}
# ignore warnings from yahoo and getting symbols
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)

# create a list of stocks
tickers = c("META","TT")
for (i in tickers){
  # for each stock, get the symbols for these dates
  getSymbols(i,
             from = "2021-01-01",
             to = "2022-12-31")}

# format the stock data into a dataframe
x <- list(
  title = "date"
)
y <- list(
  title = "value"
)

stock <- data.frame(META$META.Adjusted,
                    TT$TT.Adjusted)

stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append(tickers,'Dates')

# set dates to Date type
stock$date<-as.Date(stock$Dates,"%Y-%m-%d")

```

#### Meta and Twitter Stock Prices, Visualization

```{r}
ggplot(stock, aes(x=date)) +
  # plot both symbols as lines
  geom_line(aes(y=META, colour="META")) +
  geom_line(aes(y=TT, colour="TT")) +
   labs(
    title = "Stock Prices, Meta & Twitter",
    subtitle = "2021-2022",
    x = "Date",
    y = "Adjusted Closing Prices") +
    theme(panel.background = element_rect(fill = "white", colour = "grey50")) +
    # create guide for symbols
    guides(colour=guide_legend(title="Social Media Companies")) 
```

The most striking observation from this plot is the steep and sudden decline of META's stock price in early 2022. This trend was predominantly a response by investors to Facebook's admission to playing catch up with TikTok and struggling to develop workarounds for serving ads following Apple's iOS privacy updates. META's financial performance further deteriorated following the revelations regarding the massive amount of resources allocated towards research and propping up the metaverse to little consumer excitement or internal use. The fact that Meta was at one point worth twice as much as Twitter only for the two to eventually flip positions enforces the lack of confidence in Facebook's parent company.

Likewise, Twitter's financial performance has not been stellar either. The acquisition and subsequent takeover of the company by Elon Musk created no shortage of controversial headlines, dramatic policy changes, and a series of layoffs across the company. We can observe the responses to these developments in more detail through the interactive visualization below.

#### Meta and Twitter Stock Prices, Interactive Visualization

```{r}
# recreate line plots of symbols
g4<- ggplot(stock, aes(x=date)) +
  geom_line(aes(y=META, colour="META"))+
  geom_line(aes(y=TT, colour="TT"))+
   labs(
    title = "Stock Prices for the Social Media Platforms",
    subtitle = "From 2021-2022",
    x = "Date",
    y = "Adjusted Closing Prices")+
    theme(panel.background = element_rect(fill = "white", colour = "grey50"))+
    guides(colour=guide_legend(title="Social Media Platforms")) 

# add tool-tip frim plotly
ggplotly(g4) %>%
  layout(hovermode = "x")

```

The interactive tool-tips further highlight the struggles these companies have faced. In early February 2022, META dropped by 26%, its worst day in the market to date. Over the course of early 2022, Twitter experienced similar, but more gradual, losses, sliding from almost \$200/share to \$119/share before it's gradual ascent. Of course, these graphs only depict two years of data, most of which were heavily impacted by a number of extraneous factors including the COVID-19 pandemic and global inflation, but these trends are still worth exploring to see how the respective management and vision for these companies has shaped their financial outlook.

### Data Visualization with Cryptocurrency Data

#### Ethereum Value

Similar to traditional stock prices, we can also examine the value of various cryptocurrencies in a similar manner. Here we consider Ethereum, the second most popular option behind Bitcoin.

```{r, warning=FALSE}
# get a single symbol, create dataframe, and set Date type
eth <- getSymbols("ETH-USD",auto.assign = FALSE, from = "2021-09-15",src="yahoo") 
eth=data.frame(eth)
eth <- data.frame(eth,rownames(eth))
colnames(eth)[7] = "date"
eth$date<-as.Date(eth$date,"%Y-%m-%d")
```

#### Ethereum Value, Visualization

```{r}
## ggplot for static visualization
eth %>%
  ggplot()+
  geom_line(aes(y=ETH.USD.Adjusted,x=date),color="blue") + 
  labs(title="Ethereum-USD Adjusted Value", subtitle="Sep 2021 - Jan 2023",
       x="Date", y="ETH-USD Adjusted Value") + 
  theme_minimal()
```

From the initial line plot, we observe the substantial collapse of cryptocurrencies, Ethereum included. While activity and confidence rose to new all-time highs in the fourth quarter of 2021, the value dropped starkly over the course of the following year, finding a floor near \$1000 in the summer before recovering slightly.

#### Ethereum Value, Interactive Visualization

```{r}
## plotly implementation of interactive viz
fig <- plot_ly(eth, x = ~date, y = ~ETH.USD.Adjusted, type = 'scatter', mode = 'lines')

fig <- fig %>% layout(title = "Ethereum Value, Sep. 2021 - Jan 2023")
fig
```

Using the interactive tool-tip, we can observe in finer detail the tumultuous slide in value that took place over the last fifteen months. In November 2021, Ethereum hit an all-time high of \$4812, but had fallen to \$993 by June 2022. In the last two quarters, the cryptocurrency has gone on several runs, even doubling in value from the low in June to August 2022. These gains have not remained steady, however, with each subsequent rise in value showing less favorable momentum.

If we examine only the last thirty days in a candlestick plot, however, we see perhaps a more cautiously optimistic picture, particularly for short-term investors.

```{r}
#plotly
# candlestick plot
# take only the last 30 days
df <- tail(eth, 30)

# store each component of candleplot based on df columns
figc <- df %>% plot_ly(x = ~date, type="candlestick",
          open = ~ETH.USD.Open, close = ~ETH.USD.Close,
          high = ~ETH.USD.High, low = ~ETH.USD.Low) 
figc <- figc %>% layout(title = "Ethereum-USD Adjusted Value, 30 Days")

figc
```

Since the start of the year, ETH-USD has only closed down four days and has risen in value by 25%. These positive interpretations must of course be dampened when placed in the broader context described above, but this representation highlights the volatility and opportunity for investors who bet on cryptocurrencies, which tend to be more volatile in both the gains and losses than traditional investment instruments.

### Climate Data

Time series are also frequently used in analyzing weather and climate data given the inherent seasonality and drastic changes that can be observed over time. In this example, we look at temperature recordings from the National Arboretum in Washington D.C. across most of 2021.

```{r}
# read in data, then filter to location and columns of interest. set Date.
climate <- read.csv("_data/climate.csv")
nat_arb <- climate %>%
  filter(STATION=="USC00186350") %>%
  select(STATION, NAME, DATE, TMAX, TMIN, TOBS)
nat_arb$DATE <- as.Date(nat_arb$DATE)
```

```{r}
# create a blank plot with time as the X axis
fig <- plot_ly(nat_arb, x = ~DATE) 
# add a line for the max temp, but make it transparent and type scatter to create the banding effect
# set connectgaps to TRUE to account for missing data (otherwise the plot is inverted at NAs)
fig <- fig %>% add_trace(y = ~TMAX, type = 'scatter', mode = 'lines',
        line = list(color = 'transparent'),
        showlegend = FALSE, name = 'High', connectgaps=TRUE)
# create the lower band for minimum temperatures
fig <- fig %>% add_trace(y = ~TMIN, type = 'scatter', mode = 'lines',
            fill = 'tonexty', fillcolor='rgba(0,100,80,0.2)', line = list(color = 'transparent'),
            showlegend = FALSE, name = 'Low', connectgaps=TRUE) 
# create the trendline for observed temperatures that will appear between the two bands
fig <- fig %>% add_trace(y = ~TOBS, type = 'scatter', mode = 'lines',
            line = list(color='rgb(0,100,80)'),
            name = 'Observed', connectgaps=TRUE) 

fig <- fig %>% layout(title = "Observed, High and Low Temperatures in Washington D.C.",
        # format the x and y axis tickers and grids to be consistent with previous plots
         xaxis = list(title = "",
                      showgrid = TRUE,
                      showline = FALSE,
                      showticklabels = TRUE,
                      tickcolor = 'rgb(127,127,127)',
                      ticks = 'outside',
                      zeroline = FALSE),

         yaxis = list(title = "Temperature (degrees F)",
                      showgrid = TRUE,
                      showline = FALSE,
                      showticklabels = TRUE,
                      tickcolor = 'rgb(127,127,127)',
                      ticks = 'outside',
                      zeroline = FALSE))

fig
```

The first trend that jumps out from the visualization is the expected seasonality in which temperatures generally rise through spring and summer and taper off through fall into winter. The observed temperatures, those recorded at the National Arboretum itself, seem to trend towards the low end of the daily temperature spectrum. This pattern could be due to observations being recorded earlier in the morning when temperatures tend to be lower or perhaps the National Arboretum's location lends itself to cooler temperatures relative to the rest of the district. Finally, we note variety in the range of the lows and highs themselves, sometimes being only four or five degrees apart and on other days having a range of more than twenty degrees.
